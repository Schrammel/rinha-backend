// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


model Cliente {
  id Int @id @default(autoincrement())
  limite Int 
  saldo Int
  transacoes Transacao[]
}

enum Tipo {
  d
  c
}

model Transacao {
  id Int @id @default(autoincrement())
  valor Int
  conta Int
  tipo Tipo
  cliente Cliente @relation(fields: [conta], references: [id])
  descricao String
  realizada_em DateTime @default(now())
}

// -- CreateTable
// CREATE TABLE "Transacao" (
//     "clientId" INTEGER NOT NULL,
//     "id" SERIAL NOT NULL,
//     "valor" INTEGER NOT NULL,
//     "tipo" "TransactionType" NOT NULL,
//     "descricao" TEXT NOT NULL,
//     "realizada_em" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

//     CONSTRAINT "Transacao_pkey" PRIMARY KEY ("id")
// );

// -- AddForeignKey
// ALTER TABLE "Transacao" ADD CONSTRAINT "Transacao_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES "Cliente"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

// -- Criar a função e a trigger para atualizar o saldo do cliente
// CREATE OR REPLACE FUNCTION atualizar_saldo()
// RETURNS TRIGGER AS $$
// BEGIN
//   IF NEW.tipo = 'c' THEN
//           UPDATE "Cliente"
//           SET saldo = (SELECT saldo + NEW.valor FROM "Cliente" WHERE id = NEW."clientId")
//           WHERE id =  NEW."clientId";
//   ELSE 
//       IF (SELECT (saldo - NEW.valor) > (limite * -1) limite FROM "Cliente" WHERE id =  NEW."clientId") THEN
// 			UPDATE "Cliente" set saldo = saldo - NEW.valor WHERE id =  NEW."clientId";
//       ELSE
//           RAISE EXCEPTION 'Saldo não pode ser negativo.';
//       END IF;
//   END IF;
//   RETURN NEW; 
// END;
// $$ LANGUAGE plpgsql;

// CREATE TRIGGER atualizar_saldo_trigger
// AFTER INSERT ON "Transacao"
// FOR EACH ROW
// EXECUTE FUNCTION atualizar_saldo();
